---
- name: Delete the VM
  hosts: bastion
  vars_files:
    - vars/main.yml
  vars:
    morpheus_server: "hpe-cmp.helionit.io"
    bearer_token: "ab8ec0c3-faca-4ff2-9a44-13b1411c11ff"
    cluster_name: "{{ morpheus['customOptions']['cluster_name'] }}"
    openshift_working_directory_path: "{{ ansible_env.HOME }}/{{ cluster_name }}"
  tasks: 
   
    # - name: Reterives the cluster ID
    #   uri:
    #     url: https://{{ morpheus_server }}/api/clusters?name={{ cluster_name }}
    #     method: Get
    #     headers:
    #       Content-Type: "application/json"
    #       Authorization: "Bearer {{ bearer_token }}"
    #     return_content: true
    #     validate_certs: false
    #     status_code: 200
    #     timeout: 30
    #   register: webpage  
    # - debug:
    #     var: webpage.content
    # - set_fact:
    #     # cluster_id: "{{ (webpage.content | from_json).clusters[0].id }}"
    #     size: "{{ (webpage.content | from_json).meta.size }}"
    #   # when: webpage.rc == 0
    # - debug:
    #     var: size    

    # - set_fact:
    #     cluster_id: "{{ (webpage.content | from_json).clusters[0].id }}"       
    #   when: size == "1"
      
    # - name: Delete the cluster ID
    #   uri:
    #     url: https://{{ morpheus_server }}/api/clusters/{{ cluster_id }}?removeInstances=off&removeResources=on&preserveVolumes=off&releaseFloatingIps=on&releaseEIPs=on&force=off
    #     method: DELETE
    #     headers:
    #       Content-Type: "application/json"
    #       Authorization: "Bearer {{ bearer_token }}"
    #     return_content: yes
    #     validate_certs: false
    #     status_code: 200
    #     timeout: 30
    #   register: webpage
    #   when: size == "1"


    - name: Get OpenShift node names
      command: oc get nodes -o json
      register: oc_nodes
      environment:
        KUBECONFIG: "{{ openshift_working_directory_path }}/install-dir/auth/kubeconfig"

    - name: Extract and sanitize all VM names (remove domain)
      set_fact:
        vm_list: >-
          {{ (oc_nodes.stdout | from_json)['items']
            | map(attribute='metadata.name')
            | map('regex_replace', '\\..*$', '')
            | list }}
            
    - name: Debug sanitized VM names
      debug:
        var: vm_list

    - name: Stop playbook after debugging
      meta: end_play



    - name: Destroy OpenShift cluster
      command: >
        ./openshift-install destroy cluster --dir={{ openshift_working_directory_path }}/install-di --log-level=infog
      args:
        chdir: "{{ openshift_working_directory_path }}/bin"
      register: result_complete
      ignore_errors: true

    - name: Print destroy cluster output
      debug:
        var: destroy_output.stdout_lines


    - name: Power-Off the openshift VMs
      vmware_guest:
        hostname: "{{ vcenter.host }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        validate_certs: no
        folder: "{{ vcenter.folder }}"
        name: "{{ item }}"
        state: poweredoff
      loop: "{{  vm_list }}"
      loop_control:
        label: "Power Off {{ item.name }}"
      ignore_errors: True
    
    - name: Delete openshift VM
      vmware_guest:
        hostname: "{{ vcenter.host }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        validate_certs: no
        folder: "{{ vcenter.folder }}"
        name: "{{ item }}"
        state: absent
      loop: "{{  vm_list }}"
      loop_control:
        label: "Power On {{ item.name }}"
      ignore_errors: True

