---
# - name: Wait for bootstrap to complete prior to starting workers
#   command: "{{ openshift_working_directory_path }}/bin/openshift-install --dir={{ openshift_working_directory_path }}/install-dir wait-for bootstrap-complete --log-level debug" # noqa 301
#   retries: 5
#   delay: 10
#   register: result_bootstrap
#   until: result_bootstrap.rc == 0

# - name: Wait for OpenShift bootstrap to complete
#   shell: >
#     ./openshift-install wait-for bootstrap-complete --dir={{ openshift_working_directory_path }}/install-dir --log-level=info
#   args:
#     chdir: "{{ openshift_working_directory_path }}/bin"
#   register: bootstrap_status
#   retries: 30
#   delay: 60
#   until: bootstrap_status.rc == 0
#   failed_when: >
#     bootstrap_status.rc != 0 or
#     ('failed' in bootstrap_status.stderr | default('')) or
#     ('error' in bootstrap_status.stderr | default(''))

- name: Wait for Kubernetes API to be available
  uri:
    url: "https://api.{{ openshift_cluster_name }}.{{ openshift_base_domain }}:6443/healthz"
    method: GET
    validate_certs: no
  register: api_health
  retries: 30
  delay: 1800
  until: api_health.status == 200

- name: Wait for OpenShift bootstrap to complete
  shell: >
    ./openshift-install wait-for bootstrap-complete --dir={{ openshift_working_directory_path }}/install-dir --log-level=info
  args:
    chdir: "{{ openshift_working_directory_path }}/bin"
  register: bootstrap_status
  retries: 30
  delay: 60
  until: bootstrap_status.rc == 0
  failed_when: false

- name: Power-Off the bootstrap VMs
  vmware_guest:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    validate_certs: no
    folder: "{{ vcenter.folder }}"
    name: "{{ item.name }}"
    state: poweredoff
  loop: "{{ bootstrap_nodes_list }}"
  loop_control:
    label: "Power Off {{ item.name }}"

- name: Delete Bootstrap VM
  vmware_guest:
    hostname: "{{ vcenter.host }}"
    username: "{{ vcenter.username }}"
    password: "{{ vcenter.password }}"
    datacenter: "{{ vcenter.datacenter }}"
    validate_certs: no
    folder: "{{ vcenter.folder }}"
    name: "{{ item.name }}"
    state: absent
  loop: "{{ bootstrap_nodes_list }}"
  loop_control:
    label: "Delete {{ item.name }}"

    
- name: Copy comment proxy
  template:
    src: "comment_proxy.cfg.j2"
    dest: "/etc/haproxy/haproxy.cfg"
    mode: '0664'    
    
- name: Restart the haproxy
  command: "systemctl restart haproxy.service" 
    

