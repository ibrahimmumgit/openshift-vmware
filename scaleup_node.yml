- name: Add Worker node
  hosts: bastion
  vars_files:
    - vars/main.yml
  vars:
    # nodename: "{{  morpheus['customOptions']['nodename'] }}"
    morpheus_server: "hpe-cmp.helionit.io"
    bearer_token: "ab8ec0c3-faca-4ff2-9a44-13b1411c11ff"
    ipaddr: "{{ morpheus['customOptions']['ipaddress'] }}"
    nodename: "{{  morpheus['customOptions']['nodename'] }}"
    cluster_name: "{{ morpheus['customOptions']['cluster_name'] }}"
    openshift_base_domain: "ocp.local"
    # nodename: "ocp4-compute-3"
    kubeconfig_path: "{{ ansible_env.HOME }}/{{ cluster_name }}/install-dir/auth/kubeconfig"
    openshift_working_directory_path: "{{ ansible_env.HOME }}/{{ cluster_name }}"
    # ipaddr: "192.168.9.51"
    # nodename: "ocp4-compute-4"
    # kubeconfig_path: '/root/lab/install-dir/auth/kubeconfig'

  tasks:
    - name: Get ignition_value file contents
      command: "cat {{ worker_node.ignition_file_path }}"
      register: ignition
    
    - name: set_fact the ignition_value
      set_fact:
        ignition_value: "{{ ignition.stdout }}"
        
    - name: Clone from openshift cluster
      vmware_guest:
        hostname: "{{ vcenter.host }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        validate_certs: no
        datacenter: "{{ vcenter.datacenter }}"
        folder: "{{ vcenter.folder }}"
        cluster: "{{ vcenter.cluster }}"
        template: "{{ openshift_template_name }}"
        #name: "{{ item.name }}.{{ openshift_cluster_name }}.{{ openshift_base_domain }}"
        name: "{{ nodename }}"
        state: "poweredoff"
        disk:
        - datastore: "{{ vcenter.default_datastore }}"
          type: "{{ worker_node.disk.type }}"
          size_gb: "{{ worker_node.disk.size | default(120) }}"
        hardware:
          memory_mb: "{{ worker_node.ram | default(16384) }}"
          memory_reservation_lock: true
          memory_reservation: "{{ bootstrap_node.ram }}"
          num_cpus: "{{ worker_node.cpus | default(4) }}"
        #networks:
        #- name: "{{ vcenter.network }}"
        wait_for_ip_address: no
        customvalues: 
          - key: "sched.cpu.latencySensitivity"
            value: "normal"
          - key: "guestinfo.afterburn.initrd.network-kargs"
            value: "ip={{ ipaddr }}::{{ vcenter.gateway }}:{{ vcenter.netmask }}:{{ nodename }}.{{ openshift_cluster_name }}.{{ openshift_base_domain }}:ens192:off:{{ vcenter.dns }}"               
          - key: "disk.EnableUUID"
            value: "TRUE"
          - key: "guestinfo.ignition.config.data.encoding"
            value: "base64"        
          - key: "guestinfo.ignition.config.data"
            value: "{{ ignition_value }}"
          #   value: "ip={{ IPaddress }}::{{ vcenter.gateway  }}:{{ vcenter.netmask }}:{{ item.name }}:none:{{ vcenter.dns  }}"

    - name: Fetch the node details
      vmware_guest_info:
        hostname: "{{ vcenter.host }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        validate_certs: no
        datacenter: "{{ vcenter.datacenter }}"
        name: "{{ nodename }}"
      register: result 
      
    - name: IP Details
      debug:
        msg: "ip={{ ipaddr }}::{{ vcenter.gateway }}:{{ vcenter.netmask }}:{{ nodename }}.{{ openshift_cluster_name }}.{{ openshift_base_domain }}:ens192:off:{{ vcenter.dns }}"   
        
    - name: worker node mac address
      debug:
        msg: "{{ result.instance.hw_eth0.macaddress }}"
      
    - name: Configure network for worker nodes
      vmware_guest_network:
        hostname: "{{ vcenter.host }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        validate_certs: no
        name: "{{ nodename }}"
        networks:
          - name: "{{ vcenter.network }}"
            manual_mac: "{{ result.instance.hw_eth0.macaddress }}"
            label: "Network adapter 1"
            state: present
            start_connected: true

    - name: Power-On the worker VMs
      vmware_guest:
        hostname: "{{ vcenter.host }}"
        username: "{{ vcenter.username }}"
        password: "{{ vcenter.password }}"
        datacenter: "{{ vcenter.datacenter }}"
        validate_certs: no
        folder: "{{ vcenter.folder }}"
        name: "{{ nodename }}"
        state: poweredon
        wait_for_ip_address: yes
        

        
    - name: Approve CSR and wait for single worker node to be Ready
      shell: |
        kubeconfig="{{ openshift_working_directory_path }}/install-dir/auth/kubeconfig"
        target_node="{{ nodename }}.{{ cluster_name }}.{{ openshift_base_domain }}"
        timeout=600
        elapsed=0
        interval=10

        while [ $elapsed -lt $timeout ]; do
          echo "Checking for pending CSRs to approve..."
          for csr in $(kubectl --kubeconfig="$kubeconfig" get csr --no-headers 2>/dev/null | awk '/Pending/ {print $1}'); do
            echo "Approving CSR: $csr"
            kubectl --kubeconfig="$kubeconfig" certificate approve "$csr"
          done

          echo "Checking readiness of node: $target_node"
          if kubectl --kubeconfig="$kubeconfig" get node "$target_node" --no-headers 2>/dev/null | grep -q " Ready"; then
            echo "Node $target_node is Ready"
            exit 0
          else
            echo "Node $target_node is NOT Ready yet"
          fi

          sleep $interval
          elapsed=$((elapsed + interval))
        done

        echo "Timeout reached before node $target_node became Ready"
        exit 1
      environment:
        KUBECONFIG: "{{ openshift_working_directory_path }}/install-dir/auth/kubeconfig"
      register: csr_node_wait
      changed_when: false
      failed_when: csr_node_wait.rc != 0

    - name: Reterives the cluster ID
      uri:
        url: https://{{ morpheus_server }}/api/clusters?name={{ cluster_name }}
        method: Get
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ bearer_token }}"
        return_content: true
        validate_certs: false
        status_code: 200
        timeout: 30
      register: webpage  
    - debug:
        var: webpage.content
    - set_fact:
        # cluster_id: "{{ (webpage.content | from_json).clusters[0].id }}"
        size: "{{ (webpage.content | from_json).meta.size }}"
      # when: webpage.rc == 0
    - debug:
        var: size    

    - set_fact:
        cluster_id: "{{ (webpage.content | from_json).clusters[0].id }}"       
      when: size == "1"
      
    - name: Update the cluster
      uri:
        url: https://{{ morpheus_server }}/api/clusters/{{ cluster_id }}/refresh
        method: PUT
        headers:
          Content-Type: "application/json"
          Authorization: "Bearer {{ bearer_token }}"
        return_content: yes
        validate_certs: false
        status_code: 200
        timeout: 30
      register: webpage
      when: size == "1"
  


      
